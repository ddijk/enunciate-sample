openapi: 3.0.0
info:
  title: "If You Wanna Be Cool API"
  version: "1.0-SNAPSHOT"
  description: "<p>Welcome to the API for our incredibly innovative social networking site,\n<u>IfYouWannaBeCool.com</u>!  We've got a full SOAP API, and even a few\nREST endpoints.  Feel free to check it out!</p>\n\n<h1>Disclaimer</h1>\n\n<p>You are free to use wannabecool as long as you agree to the\nterms of service which dictate that you give up your right to privacy.</p>"
servers:
- url: "/api"
paths:
  "/persona":
    post:
      description: "Store a persona."
      tags:
        - "PersonaServiceImpl"
      summary: "Store a persona."
      deprecated: false
      operationId: storePersona
      requestBody:
        description: "The persona to store."
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/json_Persona"
      responses:
        "201":
          description: "Success"
 
  "/persona/{id}":
    delete:
      description: "Delete a persona."
      tags:
        - "PersonaServiceImpl"
      summary: "Delete a persona."
      deprecated: false
      operationId: deletePersona
      parameters:
      - name: "id"
        in: path
        description: "The id of the persona to delete."
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "Whether the persona was successfully deleted."
          content:
            "*/*":
              schema:
                description: "Whether the persona was successfully deleted."
                type: boolean
 
    get:
      description: "Reads a persona."
      tags:
        - "PersonaServiceImpl"
      summary: "Reads a persona."
      deprecated: false
      operationId: readPersona
      parameters:
      - name: "id"
        in: path
        description: "The id of the persona to read."
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: "The persona."
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/json_Persona"
 
  "/persona/{id}.json":
    get:
      description: ""
      tags:
        - "PersonaServiceImpl"
      summary: ""
      deprecated: false
      operationId: readPersonaJson
      responses:
        "200":
          description: ""
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/json_Persona"
 
  "/group":
    post:
      description: "Create a social group."
      tags:
        - "SocialGroupServiceImpl"
      summary: "Create a social group."
      deprecated: false
      operationId: createSocialGroup
      parameters:
      - name: "exclusive"
        in: query
        description: "Whether the group is exclusive."
        required: false
        schema:
          type: boolean
        style: form
      - name: "leader"
        in: query
        description: "The id of the group leader."
        required: false
        schema:
          type: string
        style: form
      - name: "member"
        in: query
        description: "The ids of the members of the group."
        required: false
        schema:
          type: array
          items:
            type: string
        style: form
      responses:
        "201":
          description: "The group that was created."
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/json_SocialGroup"
 
  "/group/{groupId}":
    get:
      description: "Read the specified social group."
      tags:
        - "SocialGroupServiceImpl"
      summary: "Read the specified social group."
      deprecated: false
      operationId: readGroup
      parameters:
      - name: "groupId"
        in: path
        description: "The id of the group."
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: "The social group."
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/json_SocialGroup"
 
    post:
      description: "Adds a persona to a social group."
      tags:
        - "SocialGroupServiceImpl"
      summary: "Adds a persona to a social group."
      deprecated: false
      operationId: addToSocialGroup
      parameters:
      - name: "groupId"
        in: path
        description: "The id of the group to add the persona to."
        required: true
        schema:
          type: string
        style: simple
      - name: "member"
        in: query
        description: "The id of the persona to add to the group."
        required: false
        schema:
          type: string
        style: form
      responses:
        "201":
          description: "Whether the persona was successfully added."
          content:
            "*/*":
              schema:
                description: "Whether the persona was successfully added."
                type: boolean
 
components:
  schemas:
    "json_Name":
      title: "Name"
      type: object
      properties:
        givenName:
          description: "The given name."
          type: string
        surname:
          description: "The surname."
          type: string
    "json_Persona":
      title: "Persona"
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        alias:
          type: string
        name:
          $ref: "#/components/schemas/json_Name"
        picture:
          type: string
        team:
          $ref: "#/components/schemas/json_Team"
    "json_SocialGroup":
      title: "SocialGroup"
      type: object
      properties:
        id:
          description: "The id of the social group."
          type: string
        memberIds:
          description: "The ids of the members in the social group."
          type: array
          items:
            type: string
        groupLeaderId:
          description: "The id of the group leader."
          type: string
        exclusive:
          description: "Whether the group is exclusive."
          type: boolean
    "json_Team":
      title: "Team"
      type: string
      enum:
      - JUMBO
      - MOVISTAR
      - KAUTSHA
      - INIIOS
      - LOTTO
      - TREK
    "xml_ns1_socialGroup":
      title: "socialGroup"
      allOf:
      - type: string
        format: binary
      - type: object
        properties:
          exclusive:
            description: "Whether the group is exclusive."
            type: boolean
          groupLeaderId:
            description: "The id of the group leader."
            type: string
          id:
            description: "The id of the social group."
            type: string
          memberIds:
            description: "The ids of the members in the social group."
            type: array
            items:
              type: string
        xml:
          name: socialGroup
          namespace: http://api.example.com/link
    "xml_ns0_name":
      title: "name"
      allOf:
      - type: string
        format: binary
      - type: object
        properties:
          givenName:
            description: "The given name."
            type: string
          surname:
            description: "The surname."
            type: string
        xml:
          namespace: http://api.example.com/persona
    "xml_ns0_persona":
      title: "persona"
      allOf:
      - type: string
        format: binary
      - type: object
        properties:
          alias:
            type: string
          email:
            type: string
          id:
            type: string
          name:
            $ref: "#/components/schemas/xml_ns0_name"
          picture:
            type: string
            format: binary
          team:
            $ref: "#/components/schemas/xml_ns0_team"
        xml:
          name: persona
          namespace: http://api.example.com/persona
    "xml_ns0_team":
      title: "team"
      type: string
      enum:
      - JUMBO
      - MOVISTAR
      - KAUTSHA
      - INIIOS
      - LOTTO
      - TREK
      xml:
        namespace: http://api.example.com/persona
